#!/usr/bin/env python
# encoding: UTF-8

"""\
samovar {option} input.samovar

Driver script for Samovar assertion-retraction engine.
"""

from os.path import realpath, dirname, join
import sys

sys.path.insert(0, join(dirname(realpath(sys.argv[0])), '..', 'src'))

from argparse import ArgumentParser
import codecs
import json
import random

from samovar.parser import Parser
from samovar.generator import Generator


def main(args):
    argparser = ArgumentParser()

    argparser.add_argument('input_files', nargs='+', metavar='FILENAME', type=str,
        help='Source files containing the scenario descriptions'
    )
    argparser.add_argument("--debug",
                         action="store_true",
                         help="Show state before and after each move")
    argparser.add_argument("--dump-ast",
                         action="store_true",
                         help="Just show the AST and stop")
    argparser.add_argument("--length",
                         type=int, default=0,
                         help="If given, generate this many events for each situation")
    argparser.add_argument("--line-per-sentence",
                         action="store_true")
    argparser.add_argument("--seed",
                         type=int, default=None,
                         help="Set random seed (to select moves deterministically)")
    argparser.add_argument("--profile",
                         action="store_true",
                         help="Run cProfile on standard 'heavy load' case and exit")
    argparser.add_argument("--words",
                         type=int, default=0,
                         help="If given, generate each scenario til this many words")

    options = argparser.parse_args(args)

    if options.profile:
        import cProfile
        def generate_fifty_thousand_words():
            with codecs.open('eg/chairs.samovar', 'r', encoding='UTF-8') as f:
                text = f.read()
            p = Parser(text)
            ast = p.world()
            random.seed(0)
            g = Generator(ast)
            g.generate_words(50000)
        cProfile.run('generate_fifty_thousand_words()')
        sys.exit(0)

    text = ''
    for arg in options.input_files:
        with codecs.open(arg, 'r', encoding='UTF-8') as f:
            text += f.read()

    p = Parser(text)
    ast = p.world()
    if options.dump_ast:
        print ast
        sys.exit(0)
    if options.seed is not None:
        random.seed(options.seed)
    for scenario in ast.scenarios:
        if scenario.goal is None:
            continue
        g = Generator(ast, scenario, debug=options.debug)
        if options.length > 0:
            events = g.generate_events(options.length)
        elif options.words > 0:
            events = g.generate_words(options.words)
        for e in events:
            if options.line_per_sentence:
                sys.stdout.write("%s\n" % e)
            else:
                sys.stdout.write("%s  " % e)
        sys.stdout.write("\n")


if __name__ == '__main__':
    main(sys.argv[1:])
